CREATE TABLE IF NOT EXISTS users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    phone VARCHAR(15) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password TEXT NOT NULL,
    address TEXT,
    bio text,
    state varchar(100) ,
    district varchar(100),
    role ENUM('customer', 'baker') NOT NULL,
    profile_image LONGBLOB DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  
CREATE TABLE IF NOT EXISTS bakers (
  baker_id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  brand_name VARCHAR(255),
  brand_proof VARCHAR(255),
  identity_proof VARCHAR(255) NOT NULL, 
  specialty VARCHAR(100),
  experience INT NOT NULL,
  order_lead_time VARCHAR(100) NULL,
  availability VARCHAR(100) NULL,
  custom_orders VARCHAR(100) NOT NULL,  
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE products (
  product_id INT AUTO_INCREMENT PRIMARY KEY,
  baker_id INT NOT NULL,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  category VARCHAR(100),
  price DECIMAL(10,2) NOT NULL,
  image VARCHAR(255),
  weight decimal(10,2) not null,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (baker_id) REFERENCES bakers(baker_id) on DELETE CASCADE
);

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    baker_id INT NOT NULL,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10,2) NOT NULL,
    payment_status ENUM('pending', 'success', 'failed','cancelled') DEFAULT 'pending',
    order_status ENUM('pending', 'accepted', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',
    delivery_address text NOT NULL,
    delivery_date DATETIME NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (baker_id) REFERENCES bakers(baker_id)  on DELETE CASCADE 
);

CREATE TABLE order_items (
    order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(product_id) on DELETE CASCADE
);

CREATE TABLE cart (
    cart_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,  
    product_id INT,
    quantity INT DEFAULT 1,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);

CREATE TABLE messages (
    message_id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id INT NOT NULL,         
    receiver_id INT NOT NULL,       
    message TEXT NOT NULL,   
    attachment VARCHAR(255),       
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (receiver_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE reviews (
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    customer_id INT NOT NULL,
    rating INT CHECK(rating BETWEEN 1 AND 5),
    comments TEXT,
    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id) on DELETE CASCADE,
    FOREIGN KEY (customer_id) REFERENCES users(user_id) on DELETE CASCADE
);

CREATE TABLE product_likes (
    like_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    customer_id INT NOT NULL,
    liked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY (product_id, customer_id), -- prevents duplicate likes
    FOREIGN KEY (product_id) REFERENCES products(product_id) on DELETE CASCADE,
    FOREIGN KEY (customer_id) REFERENCES users(user_id) on DELETE CASCADE
);

CREATE TABLE blog ( 
    blog_id INT AUTO_INCREMENT PRIMARY KEY, 
    user_id INT NOT NULL, blog_title VARCHAR(100) NOT NULL, 
    content TEXT, 
    category VARCHAR(100), 
    blog_image VARCHAR(255), 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    FOREIGN KEY (user_id) REFERENCES users(user_id) on DELETE CASCADE 
);

CREATE TABLE blog_likes ( 
    b_like_id INT AUTO_INCREMENT PRIMARY KEY, 
    blog_id INT NOT NULL, 
    user_id INT NOT NULL, 
    liked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    UNIQUE KEY (blog_id, user_id), 
    FOREIGN KEY (blog_id) REFERENCES blog(blog_id) ON DELETE CASCADE, 
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE blog_comments (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    blog_id INT NOT NULL,
    user_id INT NOT NULL,
    comment_text TEXT,
    comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (blog_id) REFERENCES blog(blog_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS baker_reviews (
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    baker_id INT NOT NULL,
    user_id INT NOT NULL,
    rating FLOAT NOT NULL CHECK (rating >= 0 AND rating <= 5),
    review_text TEXT NULL,
    review_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (baker_id) REFERENCES bakers(baker_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE feedback (
    feedback_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(150) NOT NULL,
    subject VARCHAR(200) NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
